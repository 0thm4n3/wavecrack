#!/usr/bin/python
# coding: utf8
from collections import OrderedDict
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')

###################################################################################
### MANDATORY SETTINGS 
### The application will not work if they are not filled in !
###################################################################################

# Complex random value use to sign cookies and other things by Flask
secret_key = "xxx"

# Celery settings, please harden your RabbitMQ installation by removing the default "admin" and "guest" user credentials
celery_broker_url = 'amqp://guest:guest@0.0.0.0:5672//'
celery_result_backend = 'db+sqlite:////path/to/celery/database/celery_results.sqlite'

# Databases path
database = os.path.join(BASE_DIR, 'database', 'base.db')

# Hashcat executable path, by default '/usr/bin/hashcat' on Kali
hashcat_location = '/path/to/hashcat/hashcat64.bin'

# Hashcat rules directory path, by default '/usr/share/hashcat/rules/' on Kali
hashcat_rules_location = '/path/to/hashcat/rules/'

# Hashcat rules list
rule_name_list = ["rockyou-30000.rule"]

# Wordlist directory path, by default '/usr/share/wordlists/' on Kali   
wordlists_location = '/path/to/wordlists/'

# Dictonary of available wordlists
wordlist_dictionary = OrderedDict([
    ('English dictionary','EngDict.txt'),
    ('French dictionary','FrDict.txt')
])

# Input hashes directory path
hashes_location = os.path.join(BASE_DIR, 'hashes', 'written')

# Output hashcat directory path
output_files_folder_location = '/path/to/output/folder/'

# Output logfiles directory path
log_location = '/path/to/logs/folder/'

# Upload user files directory
UPLOAD_FOLDER = '/path/to/upload/folder/'

# John executable path (only used to extract the hash from uploaded encrypted files), by default '/usr/sbin/john' on Kali
john_location = '/path/to/john-jumbo/run/'


###################################################################################
### ADDITIONAL SETTINGS 
### Default values work, but can be adjusted to your needs
###################################################################################

# Should we document that option ? :)
DEBUG = True

# Authentication settings, choose between "None", "Basic" and "LDAP"
AUTH_TYPE = "None" 

## Basic Auth settings, define the sha256 password of the allowed users
BASIC_AUTH_USERS = [
    ["user1", "89e01536ac207279409d4de1e5253e01f4a1769e696db0d6062ca9b8f56767c8", "email1@email.com"],
    ["user2", "89e01536ac207279409d4de1e5253e01f4a1769e696db0d6062ca9b8f56767c8", "email2@email.com"]
]

## LDAP settings
LDAP_HOST = "1.1.1.1"
LDAP_TLS = True
LDAP_PORT = 636
LDAP_NAME = "My LDAP"
LDAP_BASE_DN = "OU=xxx, OU=xxx, DC=xxx, DC=xxx"
LDAP_SEARCH_FILTER = "(&(sAMAccountName=%s)(memberOf=CN=xxx,OU=xxx,OU=xxx,DC=xxx,DC=xxx))"

# Separator char for hashlists/outfile
separator = '~'

# Maximal parallel cracking sessions
MAX_CRACKSESSIONS = 8

# Sleeping time when an Out Of Memory exception occured
OOM_DELAY_SLEEP = 15 * 60

# John dictionary/Useful to extract hash from files protected by password
extensions_dictionary = {
    '7z':'7z2john.py',
    'pdf':'pdf2john.py', 'doc':'office2john.py',
    'docm':'office2john.py',
    'dotx':'office2john.py',
    'dotm':'office2john.py',
    'xls':'office2john.py',
    'xlsx':'office2john.py',
    'ppt':'office2john.py',
    'pptx':'office2john.py',
    'docx':'office2john.py',
    'odf':'odf2john.py',
    'zip':'zip2john'
    }
ALLOWED_EXTENSIONS = set(extensions_dictionary.keys())

# Crack durations timeout, in days
CRACK_DURATIONS = [3,7,30]

# Disable hashcat pot file, add "--potfile-disable" to hashcat command
HASHCAT_DISABLE_POT_FILE = False
